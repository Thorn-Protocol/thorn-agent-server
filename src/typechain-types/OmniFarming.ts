/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OmniFarmingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_BASE"
      | "agent"
      | "balance"
      | "balanceLocked"
      | "beneficiary"
      | "changeAgent"
      | "changeGovernment"
      | "deposit"
      | "deposited"
      | "fee"
      | "getWithdrawListLength"
      | "governance"
      | "lastTimeUpdated"
      | "listAccountWithdraw"
      | "maxSupply"
      | "maxWithdrawList"
      | "minLpWithdraw"
      | "rate"
      | "requestWithdraw"
      | "setBeneficiary"
      | "setFee"
      | "setMaxSupply"
      | "setMaxWithdrawList"
      | "setMinLpWithdraw"
      | "setWithdrawing"
      | "totalSupply"
      | "totalSupplyLocked"
      | "transferToTreasury"
      | "updateRate"
      | "usdc"
      | "withdraw"
      | "withdrawForRequested"
      | "withdrawing"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentChanged"
      | "Deposited"
      | "FeeUpdated"
      | "GovernmentChanged"
      | "RateUpdated"
      | "RequestedWithdraw"
      | "TreasurySet"
      | "TreasuryTransferred"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "FEE_BASE", values?: undefined): string;
  encodeFunctionData(functionFragment: "agent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceLocked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernment",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposited",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWithdrawListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listAccountWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxWithdrawList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLpWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWithdrawList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLpWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawing",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToTreasury",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForRequested",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawing",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "FEE_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "agent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposited", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listAccountWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdrawList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLpWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWithdrawList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLpWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawing",
    data: BytesLike
  ): Result;
}

export namespace AgentChangedEvent {
  export type InputTuple = [newAgent: AddressLike];
  export type OutputTuple = [newAgent: string];
  export interface OutputObject {
    newAgent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenAmount: BigNumberish,
    lpAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenAmount: bigint,
    lpAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenAmount: bigint;
    lpAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernmentChangedEvent {
  export type InputTuple = [newGovernment: AddressLike];
  export type OutputTuple = [newGovernment: string];
  export interface OutputObject {
    newGovernment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateUpdatedEvent {
  export type InputTuple = [oldRate: BigNumberish, newRate: BigNumberish];
  export type OutputTuple = [oldRate: bigint, newRate: bigint];
  export interface OutputObject {
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedWithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasurySetEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    treasury: BytesLike,
    tokenAddress: BytesLike
  ];
  export type OutputTuple = [
    chainId: bigint,
    treasury: string,
    tokenAddress: string
  ];
  export interface OutputObject {
    chainId: bigint;
    treasury: string;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryTransferredEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    lpAmount: BigNumberish,
    tokenAmount: BigNumberish,
    feeAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    lpAmount: bigint,
    tokenAmount: bigint,
    feeAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    lpAmount: bigint;
    tokenAmount: bigint;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OmniFarming extends BaseContract {
  connect(runner?: ContractRunner | null): OmniFarming;
  waitForDeployment(): Promise<this>;

  interface: OmniFarmingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_BASE: TypedContractMethod<[], [bigint], "view">;

  agent: TypedContractMethod<[], [string], "view">;

  balance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  balanceLocked: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  beneficiary: TypedContractMethod<[], [string], "view">;

  changeAgent: TypedContractMethod<
    [newAgent: AddressLike],
    [void],
    "nonpayable"
  >;

  changeGovernment: TypedContractMethod<
    [newGovernment: AddressLike],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  deposited: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  getWithdrawListLength: TypedContractMethod<[], [bigint], "view">;

  governance: TypedContractMethod<[], [string], "view">;

  lastTimeUpdated: TypedContractMethod<[], [bigint], "view">;

  listAccountWithdraw: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  maxSupply: TypedContractMethod<[], [bigint], "view">;

  maxWithdrawList: TypedContractMethod<[], [bigint], "view">;

  minLpWithdraw: TypedContractMethod<[], [bigint], "view">;

  rate: TypedContractMethod<[], [bigint], "view">;

  requestWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBeneficiary: TypedContractMethod<
    [newBeneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  setMaxSupply: TypedContractMethod<
    [newMaxSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxWithdrawList: TypedContractMethod<
    [newMaxWithdrawList: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinLpWithdraw: TypedContractMethod<
    [newMinLpWithdraw: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWithdrawing: TypedContractMethod<
    [newWithdrawing: boolean],
    [void],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyLocked: TypedContractMethod<[], [bigint], "view">;

  transferToTreasury: TypedContractMethod<
    [
      amount: BigNumberish,
      allowanceTo: AddressLike,
      txnTo: AddressLike,
      txnData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  updateRate: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[amountLP: BigNumberish], [void], "nonpayable">;

  withdrawForRequested: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawing: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_BASE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "agent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceLocked"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "beneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeAgent"
  ): TypedContractMethod<[newAgent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeGovernment"
  ): TypedContractMethod<[newGovernment: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposited"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWithdrawListLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastTimeUpdated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listAccountWithdraw"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "maxSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWithdrawList"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minLpWithdraw"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBeneficiary"
  ): TypedContractMethod<[newBeneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxSupply"
  ): TypedContractMethod<[newMaxSupply: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxWithdrawList"
  ): TypedContractMethod<
    [newMaxWithdrawList: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinLpWithdraw"
  ): TypedContractMethod<
    [newMinLpWithdraw: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWithdrawing"
  ): TypedContractMethod<[newWithdrawing: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferToTreasury"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      allowanceTo: AddressLike,
      txnTo: AddressLike,
      txnData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRate"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amountLP: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawForRequested"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawing"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "AgentChanged"
  ): TypedContractEvent<
    AgentChangedEvent.InputTuple,
    AgentChangedEvent.OutputTuple,
    AgentChangedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GovernmentChanged"
  ): TypedContractEvent<
    GovernmentChangedEvent.InputTuple,
    GovernmentChangedEvent.OutputTuple,
    GovernmentChangedEvent.OutputObject
  >;
  getEvent(
    key: "RateUpdated"
  ): TypedContractEvent<
    RateUpdatedEvent.InputTuple,
    RateUpdatedEvent.OutputTuple,
    RateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RequestedWithdraw"
  ): TypedContractEvent<
    RequestedWithdrawEvent.InputTuple,
    RequestedWithdrawEvent.OutputTuple,
    RequestedWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "TreasurySet"
  ): TypedContractEvent<
    TreasurySetEvent.InputTuple,
    TreasurySetEvent.OutputTuple,
    TreasurySetEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryTransferred"
  ): TypedContractEvent<
    TreasuryTransferredEvent.InputTuple,
    TreasuryTransferredEvent.OutputTuple,
    TreasuryTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "AgentChanged(address)": TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;
    AgentChanged: TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;

    "Deposited(address,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "FeeUpdated(uint256,uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "GovernmentChanged(address)": TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;
    GovernmentChanged: TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;

    "RateUpdated(uint256,uint256)": TypedContractEvent<
      RateUpdatedEvent.InputTuple,
      RateUpdatedEvent.OutputTuple,
      RateUpdatedEvent.OutputObject
    >;
    RateUpdated: TypedContractEvent<
      RateUpdatedEvent.InputTuple,
      RateUpdatedEvent.OutputTuple,
      RateUpdatedEvent.OutputObject
    >;

    "RequestedWithdraw(address,uint256)": TypedContractEvent<
      RequestedWithdrawEvent.InputTuple,
      RequestedWithdrawEvent.OutputTuple,
      RequestedWithdrawEvent.OutputObject
    >;
    RequestedWithdraw: TypedContractEvent<
      RequestedWithdrawEvent.InputTuple,
      RequestedWithdrawEvent.OutputTuple,
      RequestedWithdrawEvent.OutputObject
    >;

    "TreasurySet(uint256,bytes,bytes)": TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;
    TreasurySet: TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;

    "TreasuryTransferred()": TypedContractEvent<
      TreasuryTransferredEvent.InputTuple,
      TreasuryTransferredEvent.OutputTuple,
      TreasuryTransferredEvent.OutputObject
    >;
    TreasuryTransferred: TypedContractEvent<
      TreasuryTransferredEvent.InputTuple,
      TreasuryTransferredEvent.OutputTuple,
      TreasuryTransferredEvent.OutputObject
    >;

    "Withdrawn(address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
