/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OmniFarmingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BPS_BASE"
      | "agentAddress"
      | "changeAgent"
      | "changeGovernment"
      | "currentWithdrawalIndex"
      | "deposit"
      | "feeBeneficiary"
      | "getDataForNextWithdraw"
      | "governanceAddress"
      | "governanceExecute"
      | "lastRate"
      | "lastRateUpdateTimestamp"
      | "lastWithdrawalRequestNonce"
      | "lpToUsdcRate"
      | "maxLpSupply"
      | "minLpWithdrawalAmount"
      | "numberRequestWithdraw"
      | "pause"
      | "paused"
      | "requestWithdraw"
      | "setBeneficiary"
      | "setFee"
      | "setMaxSupply"
      | "setMinLpWithdraw"
      | "totalLockedLpSupply"
      | "totalLpSupply"
      | "totalWithdrawalRequests"
      | "transferToTreasury"
      | "unpause"
      | "updateRate"
      | "usdcToken"
      | "userLockedLpBalance"
      | "userLpBalance"
      | "userRequestHistory"
      | "userRequestNonce"
      | "userUsdcDeposits"
      | "withdrawForRequested"
      | "withdrawalFeeBps"
      | "withdrawalRequestIndexToUser"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentChanged"
      | "Deposited"
      | "FeeUpdated"
      | "GovernmentChanged"
      | "Paused"
      | "RateUpdated"
      | "RequestedWithdraw"
      | "TreasurySet"
      | "TreasuryTransferred"
      | "Unpaused"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BPS_BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "agentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernment",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentWithdrawalIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataForNextWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceExecute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRateUpdateTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastWithdrawalRequestNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lpToUsdcRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLpSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLpWithdrawalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberRequestWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLpWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedLpSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLpSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawalRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToTreasury",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userLockedLpBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userLpBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userRequestHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRequestNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userUsdcDeposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForRequested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalRequestIndexToUser",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BPS_BASE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "agentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentWithdrawalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataForNextWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRateUpdateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastWithdrawalRequestNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpToUsdcRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLpSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLpWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberRequestWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLpWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedLpSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLpSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawalRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userLockedLpBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLpBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRequestHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRequestNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userUsdcDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalRequestIndexToUser",
    data: BytesLike
  ): Result;
}

export namespace AgentChangedEvent {
  export type InputTuple = [newAgent: AddressLike];
  export type OutputTuple = [newAgent: string];
  export interface OutputObject {
    newAgent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenAmount: BigNumberish,
    lpAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    tokenAmount: bigint,
    lpAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    tokenAmount: bigint;
    lpAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernmentChangedEvent {
  export type InputTuple = [newGovernment: AddressLike];
  export type OutputTuple = [newGovernment: string];
  export interface OutputObject {
    newGovernment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateUpdatedEvent {
  export type InputTuple = [oldRate: BigNumberish, newRate: BigNumberish];
  export type OutputTuple = [oldRate: bigint, newRate: bigint];
  export interface OutputObject {
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedWithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasurySetEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    treasury: BytesLike,
    tokenAddress: BytesLike
  ];
  export type OutputTuple = [
    chainId: bigint,
    treasury: string,
    tokenAddress: string
  ];
  export interface OutputObject {
    chainId: bigint;
    treasury: string;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryTransferredEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    lpAmount: BigNumberish,
    tokenAmount: BigNumberish,
    feeAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    lpAmount: bigint,
    tokenAmount: bigint,
    feeAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    lpAmount: bigint;
    tokenAmount: bigint;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OmniFarming extends BaseContract {
  connect(runner?: ContractRunner | null): OmniFarming;
  waitForDeployment(): Promise<this>;

  interface: OmniFarmingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BPS_BASE: TypedContractMethod<[], [bigint], "view">;

  agentAddress: TypedContractMethod<[], [string], "view">;

  changeAgent: TypedContractMethod<
    [newAgent: AddressLike],
    [void],
    "nonpayable"
  >;

  changeGovernment: TypedContractMethod<
    [newGovernment: AddressLike],
    [void],
    "nonpayable"
  >;

  currentWithdrawalIndex: TypedContractMethod<[], [bigint], "view">;

  /**
   * Deposit USDC to OmniFarming
   * @param amount : amount of USDC to deposit
   */
  deposit: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  feeBeneficiary: TypedContractMethod<[], [string], "view">;

  getDataForNextWithdraw: TypedContractMethod<[], [[string, bigint]], "view">;

  governanceAddress: TypedContractMethod<[], [string], "view">;

  governanceExecute: TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  lastRate: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lastRateUpdateTimestamp: TypedContractMethod<[], [bigint], "view">;

  lastWithdrawalRequestNonce: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  lpToUsdcRate: TypedContractMethod<[], [bigint], "view">;

  maxLpSupply: TypedContractMethod<[], [bigint], "view">;

  minLpWithdrawalAmount: TypedContractMethod<[], [bigint], "view">;

  numberRequestWithdraw: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused: TypedContractMethod<[], [boolean], "view">;

  /**
   * Request withdraw LP from OmniFarming, agent will automatic withdraw for user
   * @param amount : amount of LP to request withdraw
   */
  requestWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBeneficiary: TypedContractMethod<
    [newBeneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  setMaxSupply: TypedContractMethod<
    [newMaxSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinLpWithdraw: TypedContractMethod<
    [newMinLpWithdraw: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalLockedLpSupply: TypedContractMethod<[], [bigint], "view">;

  totalLpSupply: TypedContractMethod<[], [bigint], "view">;

  totalWithdrawalRequests: TypedContractMethod<[], [bigint], "view">;

  transferToTreasury: TypedContractMethod<
    [
      amount: BigNumberish,
      allowanceTo: AddressLike,
      txnTo: AddressLike,
      txnData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateRate: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  userLockedLpBalance: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  userLpBalance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userRequestHistory: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, boolean, boolean, bigint, bigint, bigint] & {
        requestTimestamp: bigint;
        requestAmount: bigint;
        isWithdrawal: boolean;
        isCompleted: boolean;
        requestNonce: bigint;
        requestAmountLP: bigint;
        requestAmountUSDC: bigint;
      }
    ],
    "view"
  >;

  userRequestNonce: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userUsdcDeposits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  /**
   * Only agent can call this function
   * Withdraw for requested LP from OmniFarming
   */
  withdrawForRequested: TypedContractMethod<[], [void], "nonpayable">;

  withdrawalFeeBps: TypedContractMethod<[], [bigint], "view">;

  withdrawalRequestIndexToUser: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BPS_BASE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "agentAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeAgent"
  ): TypedContractMethod<[newAgent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeGovernment"
  ): TypedContractMethod<[newGovernment: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentWithdrawalIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeBeneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDataForNextWithdraw"
  ): TypedContractMethod<[], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "governanceAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceExecute"
  ): TypedContractMethod<
    [target: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastRate"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastRateUpdateTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastWithdrawalRequestNonce"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lpToUsdcRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxLpSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minLpWithdrawalAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numberRequestWithdraw"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "requestWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBeneficiary"
  ): TypedContractMethod<[newBeneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxSupply"
  ): TypedContractMethod<[newMaxSupply: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinLpWithdraw"
  ): TypedContractMethod<
    [newMinLpWithdraw: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalLockedLpSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalLpSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWithdrawalRequests"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferToTreasury"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      allowanceTo: AddressLike,
      txnTo: AddressLike,
      txnData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRate"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userLockedLpBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userLpBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userRequestHistory"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, boolean, boolean, bigint, bigint, bigint] & {
        requestTimestamp: bigint;
        requestAmount: bigint;
        isWithdrawal: boolean;
        isCompleted: boolean;
        requestNonce: bigint;
        requestAmountLP: bigint;
        requestAmountUSDC: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userRequestNonce"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userUsdcDeposits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawForRequested"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawalFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawalRequestIndexToUser"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "AgentChanged"
  ): TypedContractEvent<
    AgentChangedEvent.InputTuple,
    AgentChangedEvent.OutputTuple,
    AgentChangedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GovernmentChanged"
  ): TypedContractEvent<
    GovernmentChangedEvent.InputTuple,
    GovernmentChangedEvent.OutputTuple,
    GovernmentChangedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RateUpdated"
  ): TypedContractEvent<
    RateUpdatedEvent.InputTuple,
    RateUpdatedEvent.OutputTuple,
    RateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RequestedWithdraw"
  ): TypedContractEvent<
    RequestedWithdrawEvent.InputTuple,
    RequestedWithdrawEvent.OutputTuple,
    RequestedWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "TreasurySet"
  ): TypedContractEvent<
    TreasurySetEvent.InputTuple,
    TreasurySetEvent.OutputTuple,
    TreasurySetEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryTransferred"
  ): TypedContractEvent<
    TreasuryTransferredEvent.InputTuple,
    TreasuryTransferredEvent.OutputTuple,
    TreasuryTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "AgentChanged(address)": TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;
    AgentChanged: TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;

    "Deposited(address,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "FeeUpdated(uint256,uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "GovernmentChanged(address)": TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;
    GovernmentChanged: TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RateUpdated(uint256,uint256)": TypedContractEvent<
      RateUpdatedEvent.InputTuple,
      RateUpdatedEvent.OutputTuple,
      RateUpdatedEvent.OutputObject
    >;
    RateUpdated: TypedContractEvent<
      RateUpdatedEvent.InputTuple,
      RateUpdatedEvent.OutputTuple,
      RateUpdatedEvent.OutputObject
    >;

    "RequestedWithdraw(address,uint256)": TypedContractEvent<
      RequestedWithdrawEvent.InputTuple,
      RequestedWithdrawEvent.OutputTuple,
      RequestedWithdrawEvent.OutputObject
    >;
    RequestedWithdraw: TypedContractEvent<
      RequestedWithdrawEvent.InputTuple,
      RequestedWithdrawEvent.OutputTuple,
      RequestedWithdrawEvent.OutputObject
    >;

    "TreasurySet(uint256,bytes,bytes)": TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;
    TreasurySet: TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;

    "TreasuryTransferred()": TypedContractEvent<
      TreasuryTransferredEvent.InputTuple,
      TreasuryTransferredEvent.OutputTuple,
      TreasuryTransferredEvent.OutputObject
    >;
    TreasuryTransferred: TypedContractEvent<
      TreasuryTransferredEvent.InputTuple,
      TreasuryTransferredEvent.OutputTuple,
      TreasuryTransferredEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdrawn(address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
