/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CompoundV3StakingUSDCModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeComet"
      | "changeGovernment"
      | "comet"
      | "deposit"
      | "getTotalValue"
      | "gorvermentExec"
      | "government"
      | "treasury"
      | "usdc"
      | "withdraw(uint256,bytes)"
      | "withdraw(bytes)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CometChanged"
      | "Deposited"
      | "GovernmentChanged"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "changeComet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernment",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "comet", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getTotalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gorvermentExec",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "government",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256,bytes)",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(bytes)",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeComet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "comet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gorvermentExec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "government", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(bytes)",
    data: BytesLike
  ): Result;
}

export namespace CometChangedEvent {
  export type InputTuple = [oldComet: AddressLike, newComet: AddressLike];
  export type OutputTuple = [oldComet: string, newComet: string];
  export interface OutputObject {
    oldComet: string;
    newComet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernmentChangedEvent {
  export type InputTuple = [
    oldGovernment: AddressLike,
    newGovernment: AddressLike
  ];
  export type OutputTuple = [oldGovernment: string, newGovernment: string];
  export interface OutputObject {
    oldGovernment: string;
    newGovernment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CompoundV3StakingUSDCModule extends BaseContract {
  connect(runner?: ContractRunner | null): CompoundV3StakingUSDCModule;
  waitForDeployment(): Promise<this>;

  interface: CompoundV3StakingUSDCModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  changeComet: TypedContractMethod<[_comet: AddressLike], [void], "nonpayable">;

  changeGovernment: TypedContractMethod<
    [_government: AddressLike],
    [void],
    "nonpayable"
  >;

  comet: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  getTotalValue: TypedContractMethod<[], [bigint], "view">;

  gorvermentExec: TypedContractMethod<
    [target: AddressLike[], value: BigNumberish[], data: BytesLike[]],
    [void],
    "nonpayable"
  >;

  government: TypedContractMethod<[], [string], "view">;

  treasury: TypedContractMethod<[], [string], "view">;

  usdc: TypedContractMethod<[], [string], "view">;

  "withdraw(uint256,bytes)": TypedContractMethod<
    [amount: BigNumberish, arg1: BytesLike],
    [void],
    "nonpayable"
  >;

  "withdraw(bytes)": TypedContractMethod<
    [arg0: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "changeComet"
  ): TypedContractMethod<[_comet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeGovernment"
  ): TypedContractMethod<[_government: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "comet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTotalValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gorvermentExec"
  ): TypedContractMethod<
    [target: AddressLike[], value: BigNumberish[], data: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "government"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw(uint256,bytes)"
  ): TypedContractMethod<
    [amount: BigNumberish, arg1: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw(bytes)"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "CometChanged"
  ): TypedContractEvent<
    CometChangedEvent.InputTuple,
    CometChangedEvent.OutputTuple,
    CometChangedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "GovernmentChanged"
  ): TypedContractEvent<
    GovernmentChangedEvent.InputTuple,
    GovernmentChangedEvent.OutputTuple,
    GovernmentChangedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "CometChanged(address,address)": TypedContractEvent<
      CometChangedEvent.InputTuple,
      CometChangedEvent.OutputTuple,
      CometChangedEvent.OutputObject
    >;
    CometChanged: TypedContractEvent<
      CometChangedEvent.InputTuple,
      CometChangedEvent.OutputTuple,
      CometChangedEvent.OutputObject
    >;

    "Deposited(uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "GovernmentChanged(address,address)": TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;
    GovernmentChanged: TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;

    "Withdrawn(uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
