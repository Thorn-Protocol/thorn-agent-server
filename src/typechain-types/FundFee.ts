/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FundFeeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agent"
      | "changeAgent"
      | "changeGovernance"
      | "feeClaimed"
      | "fee_compensation"
      | "governance"
      | "treasury"
      | "usdc"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "agent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeClaimed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fee_compensation",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "agent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fee_compensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface FundFee extends BaseContract {
  connect(runner?: ContractRunner | null): FundFee;
  waitForDeployment(): Promise<this>;

  interface: FundFeeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agent: TypedContractMethod<[], [string], "view">;

  changeAgent: TypedContractMethod<[_agent: AddressLike], [void], "nonpayable">;

  changeGovernance: TypedContractMethod<
    [_governance: AddressLike],
    [void],
    "nonpayable"
  >;

  feeClaimed: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  fee_compensation: TypedContractMethod<
    [txnHash: BytesLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  treasury: TypedContractMethod<[], [string], "view">;

  usdc: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeAgent"
  ): TypedContractMethod<[_agent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeGovernance"
  ): TypedContractMethod<[_governance: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeClaimed"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "fee_compensation"
  ): TypedContractMethod<
    [txnHash: BytesLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
