/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CompoundV3ModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "owner"
      | "supportsInterface"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "BPS_BASE"
      | "bridge"
      | "bridgeAll"
      | "changeAgent"
      | "changeGovernance"
      | "comet"
      | "deposit"
      | "feeRecipient"
      | "getLastDeposited"
      | "getPerformanceFeeBps"
      | "getTotalValue"
      | "governanceExec"
      | "initialize"
      | "lastDeposited"
      | "pause"
      | "paused"
      | "performanceFeeBps"
      | "setPerformanceFeeBps"
      | "transfer"
      | "unpause"
      | "usdc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProxyImplementationUpdated"
      | "AgentChanged"
      | "Deposited"
      | "FeeSent"
      | "GovernanceChanged"
      | "Initialized"
      | "Paused"
      | "Unpaused"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "BPS_BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridge",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAll",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "comet", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPerformanceFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceExec",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performanceFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BPS_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "comet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerformanceFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceExec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProxyImplementationUpdatedEvent {
  export type InputTuple = [
    previousImplementation: AddressLike,
    newImplementation: AddressLike
  ];
  export type OutputTuple = [
    previousImplementation: string,
    newImplementation: string
  ];
  export interface OutputObject {
    previousImplementation: string;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentChangedEvent {
  export type InputTuple = [oldAgent: AddressLike, newAgent: AddressLike];
  export type OutputTuple = [oldAgent: string, newAgent: string];
  export interface OutputObject {
    oldAgent: string;
    newAgent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeSentEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceChangedEvent {
  export type InputTuple = [
    oldGovernance: AddressLike,
    newGovernance: AddressLike
  ];
  export type OutputTuple = [oldGovernance: string, newGovernance: string];
  export interface OutputObject {
    oldGovernance: string;
    newGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CompoundV3Module extends BaseContract {
  connect(runner?: ContractRunner | null): CompoundV3Module;
  waitForDeployment(): Promise<this>;

  interface: CompoundV3ModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<[id: BytesLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  BPS_BASE: TypedContractMethod<[], [bigint], "view">;

  bridge: TypedContractMethod<
    [
      amount: BigNumberish,
      txnBridgeAllowanceTo: AddressLike,
      txnBridgeTo: AddressLike,
      txnBridgeData: BytesLike
    ],
    [void],
    "payable"
  >;

  bridgeAll: TypedContractMethod<
    [
      txnBridgeAllowanceTo: AddressLike,
      txnBridgeTo: AddressLike,
      txnBridgeData: BytesLike
    ],
    [void],
    "payable"
  >;

  changeAgent: TypedContractMethod<[_agent: AddressLike], [void], "nonpayable">;

  changeGovernance: TypedContractMethod<
    [_governance: AddressLike],
    [void],
    "nonpayable"
  >;

  comet: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<[], [void], "nonpayable">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getLastDeposited: TypedContractMethod<[], [bigint], "view">;

  getPerformanceFeeBps: TypedContractMethod<[], [bigint], "view">;

  getTotalValue: TypedContractMethod<[], [bigint], "view">;

  governanceExec: TypedContractMethod<
    [target: AddressLike[], value: BigNumberish[], data: BytesLike[]],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _government: AddressLike,
      _agent: AddressLike,
      _feeRecipient: AddressLike,
      _usdc: AddressLike,
      _comet: AddressLike,
      _performanceFeeBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  lastDeposited: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  performanceFeeBps: TypedContractMethod<[], [bigint], "view">;

  setPerformanceFeeBps: TypedContractMethod<
    [_performanceFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  usdc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[id: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "BPS_BASE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      txnBridgeAllowanceTo: AddressLike,
      txnBridgeTo: AddressLike,
      txnBridgeData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bridgeAll"
  ): TypedContractMethod<
    [
      txnBridgeAllowanceTo: AddressLike,
      txnBridgeTo: AddressLike,
      txnBridgeData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "changeAgent"
  ): TypedContractMethod<[_agent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeGovernance"
  ): TypedContractMethod<[_governance: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "comet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLastDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPerformanceFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "governanceExec"
  ): TypedContractMethod<
    [target: AddressLike[], value: BigNumberish[], data: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _government: AddressLike,
      _agent: AddressLike,
      _feeRecipient: AddressLike,
      _usdc: AddressLike,
      _comet: AddressLike,
      _performanceFeeBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "performanceFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setPerformanceFeeBps"
  ): TypedContractMethod<
    [_performanceFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProxyImplementationUpdated"
  ): TypedContractEvent<
    ProxyImplementationUpdatedEvent.InputTuple,
    ProxyImplementationUpdatedEvent.OutputTuple,
    ProxyImplementationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AgentChanged"
  ): TypedContractEvent<
    AgentChangedEvent.InputTuple,
    AgentChangedEvent.OutputTuple,
    AgentChangedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "FeeSent"
  ): TypedContractEvent<
    FeeSentEvent.InputTuple,
    FeeSentEvent.OutputTuple,
    FeeSentEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceChanged"
  ): TypedContractEvent<
    GovernanceChangedEvent.InputTuple,
    GovernanceChangedEvent.OutputTuple,
    GovernanceChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProxyImplementationUpdated(address,address)": TypedContractEvent<
      ProxyImplementationUpdatedEvent.InputTuple,
      ProxyImplementationUpdatedEvent.OutputTuple,
      ProxyImplementationUpdatedEvent.OutputObject
    >;
    ProxyImplementationUpdated: TypedContractEvent<
      ProxyImplementationUpdatedEvent.InputTuple,
      ProxyImplementationUpdatedEvent.OutputTuple,
      ProxyImplementationUpdatedEvent.OutputObject
    >;

    "AgentChanged(address,address)": TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;
    AgentChanged: TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;

    "Deposited(uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "FeeSent(uint256)": TypedContractEvent<
      FeeSentEvent.InputTuple,
      FeeSentEvent.OutputTuple,
      FeeSentEvent.OutputObject
    >;
    FeeSent: TypedContractEvent<
      FeeSentEvent.InputTuple,
      FeeSentEvent.OutputTuple,
      FeeSentEvent.OutputObject
    >;

    "GovernanceChanged(address,address)": TypedContractEvent<
      GovernanceChangedEvent.InputTuple,
      GovernanceChangedEvent.OutputTuple,
      GovernanceChangedEvent.OutputObject
    >;
    GovernanceChanged: TypedContractEvent<
      GovernanceChangedEvent.InputTuple,
      GovernanceChangedEvent.OutputTuple,
      GovernanceChangedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdrawn(uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
