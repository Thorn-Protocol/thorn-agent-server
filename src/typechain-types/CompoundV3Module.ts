/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CompoundV3ModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agent"
      | "bridge"
      | "bridgeAll"
      | "changeAgent"
      | "changeGovernance"
      | "comet"
      | "deposit"
      | "getTotalValue"
      | "governance"
      | "governanceExec"
      | "paused"
      | "transfer"
      | "usdc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentChanged"
      | "CometChanged"
      | "Deposited"
      | "GovernanceChanged"
      | "GovernmentChanged"
      | "Paused"
      | "Unpaused"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "agent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridge",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeAll",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "comet", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceExec",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(functionFragment: "agent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "comet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceExec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
}

export namespace AgentChangedEvent {
  export type InputTuple = [oldAgent: AddressLike, newAgent: AddressLike];
  export type OutputTuple = [oldAgent: string, newAgent: string];
  export interface OutputObject {
    oldAgent: string;
    newAgent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CometChangedEvent {
  export type InputTuple = [oldComet: AddressLike, newComet: AddressLike];
  export type OutputTuple = [oldComet: string, newComet: string];
  export interface OutputObject {
    oldComet: string;
    newComet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceChangedEvent {
  export type InputTuple = [
    oldGovernance: AddressLike,
    newGovernance: AddressLike
  ];
  export type OutputTuple = [oldGovernance: string, newGovernance: string];
  export interface OutputObject {
    oldGovernance: string;
    newGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernmentChangedEvent {
  export type InputTuple = [
    oldGovernment: AddressLike,
    newGovernment: AddressLike
  ];
  export type OutputTuple = [oldGovernment: string, newGovernment: string];
  export interface OutputObject {
    oldGovernment: string;
    newGovernment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CompoundV3Module extends BaseContract {
  connect(runner?: ContractRunner | null): CompoundV3Module;
  waitForDeployment(): Promise<this>;

  interface: CompoundV3ModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agent: TypedContractMethod<[], [string], "view">;

  bridge: TypedContractMethod<
    [
      amount: BigNumberish,
      txnBridgeAllowanceTo: AddressLike,
      txnBridgeTo: AddressLike,
      txnBridgeData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  bridgeAll: TypedContractMethod<
    [
      txnBridgeAllowanceTo: AddressLike,
      txnBridgeTo: AddressLike,
      txnBridgeData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  changeAgent: TypedContractMethod<[_agent: AddressLike], [void], "nonpayable">;

  changeGovernance: TypedContractMethod<
    [_governance: AddressLike],
    [void],
    "nonpayable"
  >;

  comet: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<[], [void], "nonpayable">;

  getTotalValue: TypedContractMethod<[], [bigint], "view">;

  governance: TypedContractMethod<[], [string], "view">;

  governanceExec: TypedContractMethod<
    [target: AddressLike[], value: BigNumberish[], data: BytesLike[]],
    [void],
    "nonpayable"
  >;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused: TypedContractMethod<[], [boolean], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      txnBridgeAllowanceTo: AddressLike,
      txnBridgeTo: AddressLike,
      txnBridgeData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgeAll"
  ): TypedContractMethod<
    [
      txnBridgeAllowanceTo: AddressLike,
      txnBridgeTo: AddressLike,
      txnBridgeData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeAgent"
  ): TypedContractMethod<[_agent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeGovernance"
  ): TypedContractMethod<[_governance: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "comet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTotalValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceExec"
  ): TypedContractMethod<
    [target: AddressLike[], value: BigNumberish[], data: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AgentChanged"
  ): TypedContractEvent<
    AgentChangedEvent.InputTuple,
    AgentChangedEvent.OutputTuple,
    AgentChangedEvent.OutputObject
  >;
  getEvent(
    key: "CometChanged"
  ): TypedContractEvent<
    CometChangedEvent.InputTuple,
    CometChangedEvent.OutputTuple,
    CometChangedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceChanged"
  ): TypedContractEvent<
    GovernanceChangedEvent.InputTuple,
    GovernanceChangedEvent.OutputTuple,
    GovernanceChangedEvent.OutputObject
  >;
  getEvent(
    key: "GovernmentChanged"
  ): TypedContractEvent<
    GovernmentChangedEvent.InputTuple,
    GovernmentChangedEvent.OutputTuple,
    GovernmentChangedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "AgentChanged(address,address)": TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;
    AgentChanged: TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;

    "CometChanged(address,address)": TypedContractEvent<
      CometChangedEvent.InputTuple,
      CometChangedEvent.OutputTuple,
      CometChangedEvent.OutputObject
    >;
    CometChanged: TypedContractEvent<
      CometChangedEvent.InputTuple,
      CometChangedEvent.OutputTuple,
      CometChangedEvent.OutputObject
    >;

    "Deposited(uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "GovernanceChanged(address,address)": TypedContractEvent<
      GovernanceChangedEvent.InputTuple,
      GovernanceChangedEvent.OutputTuple,
      GovernanceChangedEvent.OutputObject
    >;
    GovernanceChanged: TypedContractEvent<
      GovernanceChangedEvent.InputTuple,
      GovernanceChangedEvent.OutputTuple,
      GovernanceChangedEvent.OutputObject
    >;

    "GovernmentChanged(address,address)": TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;
    GovernmentChanged: TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdrawn(uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
