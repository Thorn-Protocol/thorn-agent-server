/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EVMTreasuryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_modules"
      | "agent"
      | "changeGovernment"
      | "disableModule"
      | "enableModule"
      | "feeUsedForBridge"
      | "gorvermentExec"
      | "governance"
      | "pause"
      | "paused"
      | "unpause"
      | "usdc"
      | "withdraw"
      | "withdrawAndBridge"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentChanged"
      | "GovernmentChanged"
      | "Paused"
      | "TreasuryTransferred"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_modules",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "agent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeGovernment",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeUsedForBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gorvermentExec",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndBridge",
    values: [
      BigNumberish,
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "agent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeUsedForBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gorvermentExec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndBridge",
    data: BytesLike
  ): Result;
}

export namespace AgentChangedEvent {
  export type InputTuple = [newAgent: AddressLike];
  export type OutputTuple = [newAgent: string];
  export interface OutputObject {
    newAgent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernmentChangedEvent {
  export type InputTuple = [newGovernment: AddressLike];
  export type OutputTuple = [newGovernment: string];
  export interface OutputObject {
    newGovernment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryTransferredEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EVMTreasury extends BaseContract {
  connect(runner?: ContractRunner | null): EVMTreasury;
  waitForDeployment(): Promise<this>;

  interface: EVMTreasuryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _modules: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  agent: TypedContractMethod<[], [string], "view">;

  changeGovernment: TypedContractMethod<
    [newGovernment: AddressLike],
    [void],
    "nonpayable"
  >;

  disableModule: TypedContractMethod<
    [module: AddressLike],
    [void],
    "nonpayable"
  >;

  enableModule: TypedContractMethod<
    [module: AddressLike],
    [void],
    "nonpayable"
  >;

  feeUsedForBridge: TypedContractMethod<[], [bigint], "view">;

  gorvermentExec: TypedContractMethod<
    [target: AddressLike[], value: BigNumberish[], data: BytesLike[]],
    [void],
    "nonpayable"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused: TypedContractMethod<[], [boolean], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  usdc: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [moduleOut: AddressLike, dataOut: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawAndBridge: TypedContractMethod<
    [
      amount: BigNumberish,
      data: BytesLike,
      modules: AddressLike,
      allowanceTo: AddressLike,
      txnTo: AddressLike,
      txnData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_modules"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "agent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeGovernment"
  ): TypedContractMethod<[newGovernment: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableModule"
  ): TypedContractMethod<[module: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableModule"
  ): TypedContractMethod<[module: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeUsedForBridge"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gorvermentExec"
  ): TypedContractMethod<
    [target: AddressLike[], value: BigNumberish[], data: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [moduleOut: AddressLike, dataOut: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAndBridge"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      data: BytesLike,
      modules: AddressLike,
      allowanceTo: AddressLike,
      txnTo: AddressLike,
      txnData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AgentChanged"
  ): TypedContractEvent<
    AgentChangedEvent.InputTuple,
    AgentChangedEvent.OutputTuple,
    AgentChangedEvent.OutputObject
  >;
  getEvent(
    key: "GovernmentChanged"
  ): TypedContractEvent<
    GovernmentChangedEvent.InputTuple,
    GovernmentChangedEvent.OutputTuple,
    GovernmentChangedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryTransferred"
  ): TypedContractEvent<
    TreasuryTransferredEvent.InputTuple,
    TreasuryTransferredEvent.OutputTuple,
    TreasuryTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AgentChanged(address)": TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;
    AgentChanged: TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;

    "GovernmentChanged(address)": TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;
    GovernmentChanged: TypedContractEvent<
      GovernmentChangedEvent.InputTuple,
      GovernmentChangedEvent.OutputTuple,
      GovernmentChangedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TreasuryTransferred()": TypedContractEvent<
      TreasuryTransferredEvent.InputTuple,
      TreasuryTransferredEvent.OutputTuple,
      TreasuryTransferredEvent.OutputObject
    >;
    TreasuryTransferred: TypedContractEvent<
      TreasuryTransferredEvent.InputTuple,
      TreasuryTransferredEvent.OutputTuple,
      TreasuryTransferredEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
