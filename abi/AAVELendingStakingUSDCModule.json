{
    "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_treasury",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_government",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_usdc",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_pool",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "token",
                    "type": "address"
                }
            ],
            "name": "SafeERC20FailedOperation",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "Deposited",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "oldGovernment",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newGovernment",
                    "type": "address"
                }
            ],
            "name": "GovernmentChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "oldPool",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newPool",
                    "type": "address"
                }
            ],
            "name": "PoolChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "Withdrawn",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_government",
                    "type": "address"
                }
            ],
            "name": "changeGovernment",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_pool",
                    "type": "address"
                }
            ],
            "name": "changePool",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes",
                    "name": "",
                    "type": "bytes"
                }
            ],
            "name": "deposit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getTotalValue",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "government",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address[]",
                    "name": "target",
                    "type": "address[]"
                },
                {
                    "internalType": "uint256[]",
                    "name": "value",
                    "type": "uint256[]"
                },
                {
                    "internalType": "bytes[]",
                    "name": "data",
                    "type": "bytes[]"
                }
            ],
            "name": "governmentExec",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "pool",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "treasury",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "usdc",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes",
                    "name": "",
                    "type": "bytes"
                }
            ],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes",
                    "name": "",
                    "type": "bytes"
                }
            ],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x1bf297076893ae79369ff9f9146f4e8d88210ab1a3016be0e301ab8c6e33ef0a",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "transactionIndex": 0,
        "gasUsed": "878668",
        "logsBloom": "0x
        "blockHash": "0x908f83636dc8bda7d0efe7430c04c49d712038d7532a07e2ef137f18725ef80a",
        "transactionHash": "0x1bf297076893ae79369ff9f9146f4e8d88210ab1a3016be0e301ab8c6e33ef0a",
        "logs": [],
        "blockNumber": 9,
        "cumulativeGasUsed": "878668",
        "status": 1,
        "byzantium": true
    },
    "args": ["0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9", "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC", "0x5FbDB2315678afecb367f032d93F642f64180aa3", "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"],
    "numDeployments": 1,
    "solcInputHash": "83dd018149a2f7b3f98f2652c67fcbf8",
    "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_government\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGovernment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGovernment\",\"type\":\"address\"}],\"name\":\"GovernmentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_government\",\"type\":\"address\"}],\"name\":\"changeGovernment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"changePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"government\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"target\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"governmentExec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/AAVEV3/AAVEV3StakingUSDC.sol\":\"AAVELendingStakingUSDCModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7c7c82afde52525f9f10ef3f5c07c3907904d17ac24f9e1c1718296b7ffb41ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/interfaces/IModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IModule {\\n    function deposit(bytes memory data) external;\\n\\n    function withdraw(bytes memory data) external;\\n\\n    function withdraw(uint256 amount, bytes memory data) external;\\n\\n    function getTotalValue() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2bc72555683a5317ce29f3f02a0a010663bcc11e6662fa53accf15cdf9ea00a2\",\"license\":\"MIT\"},\"contracts/modules/AAVEV3/AAVEV3StakingUSDC.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\nimport \\\"../../interfaces/IModule.sol\\\";\\nimport \\\"./interfaces/IPoolAAVEV3.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract AAVELendingStakingUSDCModule is IModule {\\n    using SafeERC20 for IERC20;\\n\\n    address public treasury;\\n    address public government;\\n    address public usdc;\\n    address public pool;\\n\\n    // Add events\\n    event Deposited(uint256 amount);\\n    event Withdrawn(uint256 amount);\\n    event GovernmentChanged(address oldGovernment, address newGovernment);\\n    event PoolChanged(address oldPool, address newPool);\\n\\n    modifier onlyTreasury() {\\n        require(msg.sender == treasury, \\\"Only agent\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernment() {\\n        require(msg.sender == government, \\\"Only governance\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _treasury,\\n        address _government,\\n        address _usdc,\\n        address _pool\\n    ) {\\n        treasury = _treasury;\\n        government = _government;\\n        usdc = _usdc;\\n        pool = _pool;\\n    }\\n\\n    // treasury functions\\n\\n    function deposit(bytes memory /*data*/) public override onlyTreasury {\\n        uint256 usdcBalance = IERC20(usdc).balanceOf(address(this));\\n        require(usdcBalance > 0, \\\"No USDC to deposit\\\");\\n        IERC20(usdc).approve(pool, usdcBalance);\\n        _supply(usdcBalance);\\n        emit Deposited(usdcBalance);\\n    }\\n\\n    function withdraw(bytes memory /*data*/) public override onlyTreasury {\\n        (uint256 totalCollateralBase, , , , , ) = IPoolAAVEV3(pool)\\n            .getUserAccountData(address(this));\\n        uint256 amount = totalCollateralBase;\\n        require(amount > 0, \\\"No balance to withdraw\\\");\\n        _withdraw(amount);\\n        uint256 usdcInContract = IERC20(usdc).balanceOf(address(this));\\n        IERC20(usdc).safeTransfer(treasury, usdcInContract);\\n        emit Withdrawn(usdcInContract);\\n    }\\n\\n    function withdraw(\\n        uint256 amount,\\n        bytes memory /*data*/\\n    ) public override onlyTreasury {\\n        _withdraw(amount);\\n        IERC20(usdc).safeTransfer(treasury, amount);\\n    }\\n\\n    // governance functions\\n\\n    function changeGovernment(address _government) public onlyGovernment {\\n        address oldGovernment = government;\\n        government = _government;\\n        emit GovernmentChanged(oldGovernment, _government);\\n    }\\n\\n    function changePool(address _pool) public onlyGovernment {\\n        address oldPool = pool;\\n        pool = _pool;\\n        emit PoolChanged(oldPool, _pool);\\n    }\\n\\n    function governmentExec(\\n        address[] calldata target,\\n        uint256[] calldata value,\\n        bytes[] calldata data\\n    ) public onlyGovernment {\\n        require(\\n            target.length == value.length && value.length == data.length,\\n            \\\"Array lengths must match\\\"\\n        );\\n        for (uint256 i = 0; i < target.length; i++) {\\n            _call(target[i], value[i], data[i]);\\n        }\\n    }\\n\\n    // view functions\\n\\n    function getTotalValue() public view override returns (uint256) {\\n        uint256 usdcInContract = IERC20(usdc).balanceOf(address(this));\\n        (uint256 totalCollateralBase, , , , , ) = IPoolAAVEV3(pool)\\n            .getUserAccountData(address(this));\\n        return usdcInContract + totalCollateralBase;\\n    }\\n\\n    // internal functions\\n\\n    function _supply(uint256 amount) internal {\\n        IPoolAAVEV3(pool).supply(usdc, amount, address(this), 0);\\n    }\\n\\n    function _withdraw(uint256 amount) internal {\\n        IPoolAAVEV3(pool).withdraw(usdc, amount, address(this));\\n    }\\n\\n    function _call(address target, uint256 value, bytes memory data) internal {\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        if (!success) {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"Call failed\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1e41d09fc75138a539df75045f42539046b8a09e971d9cd5859282dfd3d5ba3f\",\"license\":\"UNLICENSED\"},\"contracts/modules/AAVEV3/interfaces/IPoolAAVEV3.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPoolAAVEV3 {\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n}\\n\",\"keccak256\":\"0x8bf87efc731c587a0a5f5f95ffe5662f99de866faab75a39460292fc42d266e7\",\"license\":\"UNLICENSED\"}},\"version\":1}",
    "bytecode": "0x6080346100b957601f610e2438819003918201601f19168301916001600160401b038311848410176100be578084926080946040528339810103126100b957610047816100d4565b90610054602082016100d4565b61006c6060610065604085016100d4565b93016100d4565b9060018060a01b03928380928160018060a01b03199716876000541617600055168560015416176001551683600254161760025516906003541617600355604051610d3b90816100e98239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100b95756fe6080604052600436101561001257600080fd5b60003560e01c8063030ba25d146100c75780630968f264146100c257806316f0115b146100bd5780632672f526146100b85780633e413bee146100b35780634339bc30146100ae57806361d027b3146100a95780636844a2e9146100a457806398b1e06a1461009f578063caa648b41461009a5763f925bc651461009557600080fd5b6107ee565b6106c9565b610584565b6104f4565b6104cb565b610436565b6103fc565b6103d3565b6103aa565b610215565b61017f565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761010457604052565b6100cc565b67ffffffffffffffff811161010457601f01601f191660200190565b92919261013182610109565b9161013f60405193846100e2565b82948184528183011161015c578281602093846000960137010152565b600080fd5b9080601f8301121561015c5781602061017c93359101610125565b90565b3461015c57604036600319011261015c5760243560043567ffffffffffffffff821161015c576101b66101e8923690600401610161565b506000546001600160a01b03906101d09082163314610919565b6101d982610b11565b60025460005482169116610b7a565b005b602060031982011261015c576004359067ffffffffffffffff821161015c5761017c91600401610161565b3461015c57610223366101ea565b50600080546001600160a01b039061023e9082163314610919565b60035461026190610255906001600160a01b031681565b6001600160a01b031690565b604051632fe4a15f60e21b81523060048201529060c090829060249082905afa8015610371576102a3918491610376575b5061029e81151561098c565b610b11565b6002546102b8906001600160a01b0316610255565b6040516370a0823160e01b815230600482015290916020908290602490829086165afa8015610371577f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b569261033692859261033c575b5084546103269183916001600160a01b031690610b7a565b6040519081529081906020820190565b0390a180f35b6103269192506103639060203d60201161036a575b61035b81836100e2565b8101906109d1565b919061030e565b503d610351565b610980565b610398915060c03d60c0116103a3575b61039081836100e2565b810190610952565b505050505038610292565b503d610386565b3461015c57600036600319011261015c576003546040516001600160a01b039091168152602090f35b3461015c57600036600319011261015c576001546040516001600160a01b039091168152602090f35b3461015c57600036600319011261015c576002546040516001600160a01b039091168152602090f35b6001600160a01b0381160361015c57565b3461015c57602036600319011261015c577f89f24f59f1f74b74999221ad0a9ab9b4d1d2b27bddbf6f91b0c773ca0f94064360043561047481610425565b6001546001600160a01b03919061048e90831633146109e0565b600380548284166001600160a01b031982161790915560408051939091166001600160a01b0390811684529091166020830152819081015b0390a1005b3461015c57600036600319011261015c576000546040516001600160a01b039091168152602090f35b3461015c57602036600319011261015c577fd220bce19af917092091d2523c144f080a8bf6225a4da549d0c689f9f87cd09f60043561053281610425565b6001546001600160a01b03808216919061054d3384146109e0565b6001600160a01b031990911690831617600155604080516001600160a01b03928316815291909216602082015290819081016104c6565b3461015c57610592366101ea565b506105a860018060a01b03600054163314610919565b6002546105bf90610255906001600160a01b031681565b6040516370a0823160e01b81523060048201526020908181602481865afa9081156103715761063b9383916000936106aa575b508290610600821515610a1e565b60035460405163095ea7b360e01b81526001600160a01b03909116600482015260248101929092529094859190829060009082906044820190565b03925af1918215610371577f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea936104c69361067c575b505061032681610c0d565b8161069b92903d106106a3575b61069381836100e2565b810190610a5f565b503880610671565b503d610689565b6106c2919350823d841161036a5761035b81836100e2565b91386105f2565b3461015c57600036600319011261015c576002546106f190610255906001600160a01b031681565b6040516370a0823160e01b815230600482015290602090829060249082905afa9081156103715760009161079e575b5060035461073890610255906001600160a01b031681565b604051632fe4a15f60e21b81523060048201529060c090829060249082905afa8015610371576107749261032692600092610778575b50610a77565b0390f35b61079291925060c03d60c0116103a35761039081836100e2565b5050505050903861076e565b6107b7915060203d60201161036a5761035b81836100e2565b38610720565b9181601f8401121561015c5782359167ffffffffffffffff831161015c576020808501948460051b01011161015c57565b3461015c57606036600319011261015c5767ffffffffffffffff60043581811161015c576108209036906004016107bd565b919060243582811161015c5761083a9036906004016107bd565b9260443590811161015c576108539036906004016107bd565b9260019561086c60018060a01b036001541633146109e0565b85811480610910575b156108cb5760005b81811061088657005b806108c561089e6108998b948688610ab0565b610ac5565b6108a9838b8a610ab0565b356108bf6108b8858c8b610acf565b3691610125565b91610c7a565b0161087d565b60405162461bcd60e51b815260206004820152601860248201527f4172726179206c656e67746873206d757374206d6174636800000000000000006044820152606490fd5b50848614610875565b1561092057565b60405162461bcd60e51b815260206004820152600a60248201526913db9b1e481859d95b9d60b21b6044820152606490fd5b91908260c091031261015c5781519160208101519160408201519160608101519160a0608083015192015190565b6040513d6000823e3d90fd5b1561099357565b60405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606490fd5b9081602091031261015c575190565b156109e757565b60405162461bcd60e51b815260206004820152600f60248201526e4f6e6c7920676f7665726e616e636560881b6044820152606490fd5b15610a2557565b60405162461bcd60e51b8152602060048201526012602482015271139bc81554d110c81d1bc819195c1bdcda5d60721b6044820152606490fd5b9081602091031261015c5751801515810361015c5790565b91908201809211610a8457565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b9190811015610ac05760051b0190565b610a9a565b3561017c81610425565b9190811015610ac05760051b81013590601e198136030182121561015c57019081359167ffffffffffffffff831161015c57602001823603811361015c579190565b600354600254604051631a4ca37b60e21b81526001600160a01b039182166004820152602481019390935230604484015260209183916064918391600091165af1801561037157610b5f5750565b610b779060203d60201161036a5761035b81836100e2565b50565b60405163a9059cbb60e01b60208083019182526001600160a01b039490941660248301526044808301959095529381529092600091610bba6064826100e2565b519082855af115610980576000513d610c0457506001600160a01b0381163b155b610be25750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415610bdb565b6003546002546001600160a01b0391821692911690823b1561015c57608460009283604051958694859363617ba03760e01b8552600485015260248401523060448401528160648401525af1801561037157610c665750565b67ffffffffffffffff811161010457604052565b916000928392602083519301915af13d15610cfd573d90610c9a82610109565b91610ca860405193846100e2565b82523d6000602084013e5b15610cbb5750565b805115610cca57805190602001fd5b60405162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b6044820152606490fd5b606090610cb356fea264697066735822122036d70a501af8aca0abd5b58803e3386baa3ece9a5809ada236126bd5627119c764736f6c63430008180033",
    "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063030ba25d146100c75780630968f264146100c257806316f0115b146100bd5780632672f526146100b85780633e413bee146100b35780634339bc30146100ae57806361d027b3146100a95780636844a2e9146100a457806398b1e06a1461009f578063caa648b41461009a5763f925bc651461009557600080fd5b6107ee565b6106c9565b610584565b6104f4565b6104cb565b610436565b6103fc565b6103d3565b6103aa565b610215565b61017f565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761010457604052565b6100cc565b67ffffffffffffffff811161010457601f01601f191660200190565b92919261013182610109565b9161013f60405193846100e2565b82948184528183011161015c578281602093846000960137010152565b600080fd5b9080601f8301121561015c5781602061017c93359101610125565b90565b3461015c57604036600319011261015c5760243560043567ffffffffffffffff821161015c576101b66101e8923690600401610161565b506000546001600160a01b03906101d09082163314610919565b6101d982610b11565b60025460005482169116610b7a565b005b602060031982011261015c576004359067ffffffffffffffff821161015c5761017c91600401610161565b3461015c57610223366101ea565b50600080546001600160a01b039061023e9082163314610919565b60035461026190610255906001600160a01b031681565b6001600160a01b031690565b604051632fe4a15f60e21b81523060048201529060c090829060249082905afa8015610371576102a3918491610376575b5061029e81151561098c565b610b11565b6002546102b8906001600160a01b0316610255565b6040516370a0823160e01b815230600482015290916020908290602490829086165afa8015610371577f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b569261033692859261033c575b5084546103269183916001600160a01b031690610b7a565b6040519081529081906020820190565b0390a180f35b6103269192506103639060203d60201161036a575b61035b81836100e2565b8101906109d1565b919061030e565b503d610351565b610980565b610398915060c03d60c0116103a3575b61039081836100e2565b810190610952565b505050505038610292565b503d610386565b3461015c57600036600319011261015c576003546040516001600160a01b039091168152602090f35b3461015c57600036600319011261015c576001546040516001600160a01b039091168152602090f35b3461015c57600036600319011261015c576002546040516001600160a01b039091168152602090f35b6001600160a01b0381160361015c57565b3461015c57602036600319011261015c577f89f24f59f1f74b74999221ad0a9ab9b4d1d2b27bddbf6f91b0c773ca0f94064360043561047481610425565b6001546001600160a01b03919061048e90831633146109e0565b600380548284166001600160a01b031982161790915560408051939091166001600160a01b0390811684529091166020830152819081015b0390a1005b3461015c57600036600319011261015c576000546040516001600160a01b039091168152602090f35b3461015c57602036600319011261015c577fd220bce19af917092091d2523c144f080a8bf6225a4da549d0c689f9f87cd09f60043561053281610425565b6001546001600160a01b03808216919061054d3384146109e0565b6001600160a01b031990911690831617600155604080516001600160a01b03928316815291909216602082015290819081016104c6565b3461015c57610592366101ea565b506105a860018060a01b03600054163314610919565b6002546105bf90610255906001600160a01b031681565b6040516370a0823160e01b81523060048201526020908181602481865afa9081156103715761063b9383916000936106aa575b508290610600821515610a1e565b60035460405163095ea7b360e01b81526001600160a01b03909116600482015260248101929092529094859190829060009082906044820190565b03925af1918215610371577f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea936104c69361067c575b505061032681610c0d565b8161069b92903d106106a3575b61069381836100e2565b810190610a5f565b503880610671565b503d610689565b6106c2919350823d841161036a5761035b81836100e2565b91386105f2565b3461015c57600036600319011261015c576002546106f190610255906001600160a01b031681565b6040516370a0823160e01b815230600482015290602090829060249082905afa9081156103715760009161079e575b5060035461073890610255906001600160a01b031681565b604051632fe4a15f60e21b81523060048201529060c090829060249082905afa8015610371576107749261032692600092610778575b50610a77565b0390f35b61079291925060c03d60c0116103a35761039081836100e2565b5050505050903861076e565b6107b7915060203d60201161036a5761035b81836100e2565b38610720565b9181601f8401121561015c5782359167ffffffffffffffff831161015c576020808501948460051b01011161015c57565b3461015c57606036600319011261015c5767ffffffffffffffff60043581811161015c576108209036906004016107bd565b919060243582811161015c5761083a9036906004016107bd565b9260443590811161015c576108539036906004016107bd565b9260019561086c60018060a01b036001541633146109e0565b85811480610910575b156108cb5760005b81811061088657005b806108c561089e6108998b948688610ab0565b610ac5565b6108a9838b8a610ab0565b356108bf6108b8858c8b610acf565b3691610125565b91610c7a565b0161087d565b60405162461bcd60e51b815260206004820152601860248201527f4172726179206c656e67746873206d757374206d6174636800000000000000006044820152606490fd5b50848614610875565b1561092057565b60405162461bcd60e51b815260206004820152600a60248201526913db9b1e481859d95b9d60b21b6044820152606490fd5b91908260c091031261015c5781519160208101519160408201519160608101519160a0608083015192015190565b6040513d6000823e3d90fd5b1561099357565b60405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606490fd5b9081602091031261015c575190565b156109e757565b60405162461bcd60e51b815260206004820152600f60248201526e4f6e6c7920676f7665726e616e636560881b6044820152606490fd5b15610a2557565b60405162461bcd60e51b8152602060048201526012602482015271139bc81554d110c81d1bc819195c1bdcda5d60721b6044820152606490fd5b9081602091031261015c5751801515810361015c5790565b91908201809211610a8457565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b9190811015610ac05760051b0190565b610a9a565b3561017c81610425565b9190811015610ac05760051b81013590601e198136030182121561015c57019081359167ffffffffffffffff831161015c57602001823603811361015c579190565b600354600254604051631a4ca37b60e21b81526001600160a01b039182166004820152602481019390935230604484015260209183916064918391600091165af1801561037157610b5f5750565b610b779060203d60201161036a5761035b81836100e2565b50565b60405163a9059cbb60e01b60208083019182526001600160a01b039490941660248301526044808301959095529381529092600091610bba6064826100e2565b519082855af115610980576000513d610c0457506001600160a01b0381163b155b610be25750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415610bdb565b6003546002546001600160a01b0391821692911690823b1561015c57608460009283604051958694859363617ba03760e01b8552600485015260248401523060448401528160648401525af1801561037157610c665750565b67ffffffffffffffff811161010457604052565b916000928392602083519301915af13d15610cfd573d90610c9a82610109565b91610ca860405193846100e2565b82523d6000602084013e5b15610cbb5750565b805115610cca57805190602001fd5b60405162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b6044820152606490fd5b606090610cb356fea264697066735822122036d70a501af8aca0abd5b58803e3386baa3ece9a5809ada236126bd5627119c764736f6c63430008180033",
    "devdoc": {
        "errors": {
            "SafeERC20FailedOperation(address)": [
                {
                    "details": "An operation with an ERC-20 token failed."
                }
            ]
        },
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 7813,
                "contract": "contracts/modules/AAVEV3/AAVEV3StakingUSDC.sol:AAVELendingStakingUSDCModule",
                "label": "treasury",
                "offset": 0,
                "slot": "0",
                "type": "t_address"
            },
            {
                "astId": 7815,
                "contract": "contracts/modules/AAVEV3/AAVEV3StakingUSDC.sol:AAVELendingStakingUSDCModule",
                "label": "government",
                "offset": 0,
                "slot": "1",
                "type": "t_address"
            },
            {
                "astId": 7817,
                "contract": "contracts/modules/AAVEV3/AAVEV3StakingUSDC.sol:AAVELendingStakingUSDCModule",
                "label": "usdc",
                "offset": 0,
                "slot": "2",
                "type": "t_address"
            },
            {
                "astId": 7819,
                "contract": "contracts/modules/AAVEV3/AAVEV3StakingUSDC.sol:AAVELendingStakingUSDCModule",
                "label": "pool",
                "offset": 0,
                "slot": "3",
                "type": "t_address"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            }
        }
    }
}
